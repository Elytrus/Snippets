// -- Important Variable Declarations

int n, m;
vector<int> topo,
	matrix[MAX], amatrix[MAX];
bool vis[MAX];

/*
n -> Number of nodes
m -> Number of edges
topo -> The topologically sorted graph
matrix -> The adjecency list
amatrix -> A reverse adjecency list (nodes are mapped to parents)
vis -> A global visited array
*/

// -- Topological Sort Function

void tsort(int cur){
	vis[cur] = true;
	for(int adj : amatrix[cur])
		if(!vis[adj]) tsort(adj);
	topo.push_back(cur);
}

// -- Code that builds the topological sort of nodes

for(int i = 1; i <= n; i++)
	if((int)matrix[i].size() == 0) tsort(i);

// -- Input Code

cin >> n >> m;

for (int i = 0; i < m; ++i) {
	cin >> ba >> bb;

	matrix[ba].push_back(bb);
	amatrix[bb].push_back(ba);
}
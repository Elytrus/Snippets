// This is a sparse table for computing the max value in a range

const int MAX = 100001, B_MAX = 18;
int sptable[B_MAX][MAX]; // The base 2 log of 100000 (Max size) is ~16.609, I used 18 to be safe

void build(){ // Builds sparse table `sptable` from array `arr`
	copy(arr, arr + n + 1, sptable[0]); // First row is same as the array

	for (int i = 1; i < B_MAX; ++i) {
		int gap = 1 << (i - 1), maxv = n - (1 << i) + 1;

		for (int j = 1; j <= maxv; ++j) {
			sptable[i][j] = max(sptable[i - 1][j], sptable[i - 1][j + gap]);
		}
	}
}

int query(int a, int b){ // Querys the range from `a` to `b`
	// Find max bit
	int delta = b - a, maxbit = 1, // Max bit begins at 0 to account for `b - maxbit + 1` when `a == b`
			maxbitind = 0; // Row of the sparse table to use

	for (int i = B_MAX; i >= 0; --i) {
		int v = 1 << i;

		if(delta & v){
			maxbit = v;
			maxbitind = i;
			break;
		}
	}

	// Return Range
	return max(sptable[maxbitind][a],
			sptable[maxbitind][b - maxbit + 1]);
}
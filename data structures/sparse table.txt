const int MAX = 1000001, MLOG = 21;
int sparse[MLOG][MAX];

// Builds sparse table, assumes that the first row (sparse[0]) is already filled
inline void build(){
	for(int i = 1; i < MLOG; i++){
		int jmp = 1 << (i - 1), end = n - jmp;
		for(int j = 1; j <= end; j++)
			sparse[i][j] = max(sparse[i - 1][j], sparse[i - 1][j + jmp]);
	}
}

// Does a range max query
// 31 - __builtin_clz(x) finds the max set bit of x
inline int qmax(int l, int r){
	int delta = r - l + 1, bit = 31 - __builtin_clz(delta);
	return max(sparse[bit][l], sparse[bit][r - (1 << bit) + 1]);
}